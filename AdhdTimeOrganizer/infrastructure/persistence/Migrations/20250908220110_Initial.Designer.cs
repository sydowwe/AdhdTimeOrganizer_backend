// <auto-generated />
using System;
using AdhdTimeOrganizer.infrastructure.persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdhdTimeOrganizer.infrastructure.persistence.Migrations
{
    [DbContext(typeof(AppCommandDbContext))]
    [Migration("20250908220110_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activity.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsUnavoidable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_unavoidable");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_activity");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_activity_category_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_activity_role_id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_activity_user_id_name");

                    b.ToTable("activity", "public");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activity.ActivityCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_activity_category");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_activity_category_user_id_name");

                    b.ToTable("activity_category", "public");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activity.ActivityRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_activity_role");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_activity_role_user_id_name");

                    b.ToTable("activity_role", "public");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityHistory.ActivityHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_id");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("EndTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_timestamp");

                    b.Property<int>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_timestamp");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_activity_history");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_activity_history_activity_id");

                    b.HasIndex("UserId", "ActivityId", "StartTimestamp")
                        .IsUnique()
                        .HasDatabaseName("ix_activity_history_user_id_activity_id_start_timestamp");

                    b.ToTable("activity_history", "public");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityHistory.Alarm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_id");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_timestamp");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_alarm");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_alarm_activity_id");

                    b.HasIndex("UserId", "StartTimestamp")
                        .IsUnique()
                        .HasDatabaseName("ix_alarm_user_id_start_timestamp");

                    b.ToTable("alarm", "public");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityHistory.WebExtensionData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_id");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_web_extension_data");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_web_extension_data_activity_id");

                    b.HasIndex("UserId", "ActivityId", "StartTimestamp")
                        .IsUnique()
                        .HasDatabaseName("ix_web_extension_data_user_id_activity_id_start_timestamp");

                    b.ToTable("web_extension_data", "public");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.PlannerTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_done");

                    b.Property<int>("MinuteLength")
                        .HasColumnType("integer")
                        .HasColumnName("minute_length");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_timestamp");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_planner_task");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_planner_task_activity_id");

                    b.HasIndex("UserId", "StartTimestamp")
                        .IsUnique()
                        .HasDatabaseName("ix_planner_task_user_id_start_timestamp");

                    b.ToTable("planner_task", "public");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.RoutineTimePeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden_in_view");

                    b.Property<int>("LengthInDays")
                        .HasColumnType("integer")
                        .HasColumnName("length_in_days");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_routine_time_period");

                    b.HasIndex("UserId", "LengthInDays")
                        .IsUnique()
                        .HasDatabaseName("ix_routine_time_period_user_id_length_in_days");

                    b.HasIndex("UserId", "Text")
                        .IsUnique()
                        .HasDatabaseName("ix_routine_time_period_user_id_text");

                    b.ToTable("routine_time_period", "public");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.RoutineTodoList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_id");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("DoneCount")
                        .HasColumnType("integer")
                        .HasColumnName("done_count");

                    b.Property<bool>("IsDone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_done");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("TimePeriodId")
                        .HasColumnType("bigint")
                        .HasColumnName("time_period_id");

                    b.Property<int?>("TotalCount")
                        .HasColumnType("integer")
                        .HasColumnName("total_count");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_routine_todo_list");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_routine_todo_list_activity_id");

                    b.HasIndex("TimePeriodId")
                        .HasDatabaseName("ix_routine_todo_list_time_period_id");

                    b.HasIndex("UserId", "TimePeriodId")
                        .HasDatabaseName("ix_routine_todo_list_user_id_time_period_id");

                    b.HasIndex("UserId", "TimePeriodId", "ActivityId")
                        .IsUnique()
                        .HasDatabaseName("ix_routine_todo_list_user_id_time_period_id_activity_id");

                    b.ToTable("routine_todo_list", "public", t =>
                        {
                            t.HasCheckConstraint("CK_RoutineTodoList_DoneCount_LessOrEqual_TotalCount", "done_count <= total_count");

                            t.HasCheckConstraint("CK_RoutineTodoList_DoneCount_Min", "done_count >= 0");

                            t.HasCheckConstraint("CK_RoutineTodoList_TotalCount_Range", "total_count >= 2 AND total_count <= 99");
                        });
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.TaskUrgency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_task_urgency");

                    b.HasIndex("UserId", "Priority")
                        .IsUnique()
                        .HasDatabaseName("ix_task_urgency_user_id_priority");

                    b.HasIndex("UserId", "Text")
                        .IsUnique()
                        .HasDatabaseName("ix_task_urgency_user_id_text");

                    b.ToTable("task_urgency", "public");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.TodoList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_id");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("DoneCount")
                        .HasColumnType("integer")
                        .HasColumnName("done_count");

                    b.Property<bool>("IsDone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_done");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("TaskUrgencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_urgency_id");

                    b.Property<int>("TotalCount")
                        .HasColumnType("integer")
                        .HasColumnName("total_count");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_todo_list");

                    b.HasIndex("ActivityId")
                        .IsUnique()
                        .HasDatabaseName("ix_todo_list_activity_id");

                    b.HasIndex("TaskUrgencyId")
                        .HasDatabaseName("ix_todo_list_task_urgency_id");

                    b.HasIndex("UserId", "ActivityId")
                        .IsUnique()
                        .HasDatabaseName("ix_todo_list_user_id_activity_id");

                    b.HasIndex("UserId", "TaskUrgencyId")
                        .HasDatabaseName("ix_todo_list_user_id_task_urgency_id");

                    b.ToTable("todo_list", "public", t =>
                        {
                            t.HasCheckConstraint("CK_TodoList_DoneCount_LessOrEqual_TotalCount", "done_count <= total_count");

                            t.HasCheckConstraint("CK_TodoList_DoneCount_Min", "done_count >= 0");

                            t.HasCheckConstraint("CK_TodoList_TotalCount_Range", "total_count >= 2 AND total_count <= 99");
                        });
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.user.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CurrentLocale")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("current_locale");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("GoogleOAuthUserId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("google_o_auth_user_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("timezone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<uint>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.user.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<bool>("IsAssignable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_assignable");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.Property<int>("RoleLevel")
                        .HasColumnType("integer")
                        .HasColumnName("role_level");

                    b.HasKey("Id")
                        .HasName("pk_user_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("user_role", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_user_role_claim");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_claim_role_id");

                    b.ToTable("user_role_claim", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claim");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claim_user_id");

                    b.ToTable("user_claim", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_login_user_id");

                    b.ToTable("user_login", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user__role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user__role_role_id");

                    b.ToTable("user__role", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_token");

                    b.ToTable("user_token", "public");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activity.Activity", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.activity.ActivityCategory", "Category")
                        .WithMany("Activities")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_activity_activity_categories_category_id");

                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.activity.ActivityRole", "Role")
                        .WithMany("Activities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_activity_roles_role_id");

                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", "User")
                        .WithMany("ActivityList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_user_user_id");

                    b.Navigation("Category");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activity.ActivityCategory", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", "User")
                        .WithMany("CategoryList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_category_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activity.ActivityRole", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", "User")
                        .WithMany("RoleList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_role_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityHistory.ActivityHistory", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.activity.Activity", "Activity")
                        .WithMany("ActivityHistoryList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_history_activity_activity_id");

                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", "User")
                        .WithMany("ActivityHistoryList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_history_user_user_id");

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityHistory.Alarm", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.activity.Activity", "Activity")
                        .WithMany("AlarmList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alarm_activity_activity_id");

                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", "User")
                        .WithMany("AlarmList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alarm_user_user_id");

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityHistory.WebExtensionData", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.activity.Activity", "Activity")
                        .WithMany("WebExtensionDataList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_web_extension_data_activities_activity_id");

                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", "User")
                        .WithMany("WebExtensionDataList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_web_extension_data_user_user_id");

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.PlannerTask", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.activity.Activity", "Activity")
                        .WithMany("PlannerTaskList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planner_task_activity_activity_id");

                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", "User")
                        .WithMany("PlannerTaskList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planner_task_user_user_id");

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.RoutineTimePeriod", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", "User")
                        .WithMany("RoutineTimePeriodList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routine_time_period_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.RoutineTodoList", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.activity.Activity", "Activity")
                        .WithMany("RoutineTodoLists")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routine_todo_list_activity_activity_id");

                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.activityPlanning.RoutineTimePeriod", "RoutineTimePeriod")
                        .WithMany("RoutineTodoListColl")
                        .HasForeignKey("TimePeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_routine_todo_list_routine_time_period_time_period_id");

                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", "User")
                        .WithMany("RoutineTodoListColl")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routine_todo_list_user_user_id");

                    b.Navigation("Activity");

                    b.Navigation("RoutineTimePeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.TaskUrgency", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", "User")
                        .WithMany("TaskUrgencyList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_urgency_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.TodoList", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.activity.Activity", "Activity")
                        .WithOne("TodoList")
                        .HasForeignKey("AdhdTimeOrganizer.domain.model.entity.activityPlanning.TodoList", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_list_activity_activity_id");

                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.activityPlanning.TaskUrgency", "TaskUrgency")
                        .WithMany("TodoListColl")
                        .HasForeignKey("TaskUrgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_todo_list_task_urgency_task_urgency_id");

                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", "User")
                        .WithMany("TodoListColl")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_list_user_user_id");

                    b.Navigation("Activity");

                    b.Navigation("TaskUrgency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_claim_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claim_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_login_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user__role_asp_net_roles_role_id");

                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user__role_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("AdhdTimeOrganizer.domain.model.entity.user.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_token_user_user_id");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activity.Activity", b =>
                {
                    b.Navigation("ActivityHistoryList");

                    b.Navigation("AlarmList");

                    b.Navigation("PlannerTaskList");

                    b.Navigation("RoutineTodoLists");

                    b.Navigation("TodoList");

                    b.Navigation("WebExtensionDataList");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activity.ActivityCategory", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activity.ActivityRole", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.RoutineTimePeriod", b =>
                {
                    b.Navigation("RoutineTodoListColl");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.activityPlanning.TaskUrgency", b =>
                {
                    b.Navigation("TodoListColl");
                });

            modelBuilder.Entity("AdhdTimeOrganizer.domain.model.entity.user.User", b =>
                {
                    b.Navigation("ActivityHistoryList");

                    b.Navigation("ActivityList");

                    b.Navigation("AlarmList");

                    b.Navigation("CategoryList");

                    b.Navigation("PlannerTaskList");

                    b.Navigation("RoleList");

                    b.Navigation("RoutineTimePeriodList");

                    b.Navigation("RoutineTodoListColl");

                    b.Navigation("TaskUrgencyList");

                    b.Navigation("TodoListColl");

                    b.Navigation("WebExtensionDataList");
                });
#pragma warning restore 612, 618
        }
    }
}
